# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.2I, Mon Jan 25 20:37:40 2016

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <1> = 'Open File' ;
        <2> = 'Close' ('File' | 'That' ) ;
        <3> = 'Save File' ;
        <4> = 'b-slash' ;
        <5> = 'slash' ;
        <6> = 'Slap' ;
        <7> = 'nipe' ;
        <8> = 'ripe' ;
        <9> = 'sell ex' ;
        <10> = 'sell shree' ;
        <11> = 'un tab' ;
        <12> = 'lee' ;
        <13> = 'ree' ;
        <14> = 'doon' ;
        <15> = 'up' ;
        <16> = 'Insert Live Template' ;
        <17> = 'Surround With Live Template' ;
        <18> = 'Format' ;
        <19> = 'Full Screen' ;
        <20> = 'Bye' ;
        <21> = 'Type' <dgndictation> ;
        <22> = 'frog' ;
        <23> = 'each' ;
        <24> = 'New' ('Search' | 'Find' ) ;
        <25> = 'Find New' ;
        <26> = 'Find That' ;
        <27> = 'Find' ('Down' | 'Up' ) ;
        <28> = 'Next Bookmark' ;
        <digit> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <29> = 'Line Number' ;
        <30> = 'Line Number' <digit> ;
        <34> = 'Line' <digit> ;
        <31> = 'Line Number' <digit> <digit> ;
        <35> = 'Line' <digit> <digit> ;
        <32> = 'Line Number' <digit> <digit> <digit> ;
        <36> = 'Line' <digit> <digit> <digit> ;
        <33> = 'Line Number' <digit> <digit> <digit> <digit> ;
        <37> = 'Line' <digit> <digit> <digit> <digit> ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<34>|<31>|<35>|<32>|<36>|<33>|<37>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'webstorm','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except natlink.BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # 'Open File'
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 3, '\'Open File\'', e)
            self.firstWord = -1

    # 'Close' ('File' | 'That')
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+f4'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_2(words[2:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 4, '\'Close\' (\'File\' | \'That\')', e)
            self.firstWord = -1

    # 'Save File'
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 5, '\'Save File\'', e)
            self.firstWord = -1

    # 'b-slash'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 7, '\'b-slash\'', e)
            self.firstWord = -1

    # 'slash'
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 8, '\'slash\'', e)
            self.firstWord = -1

    # 'Slap'
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 9, '\'Slap\'', e)
            self.firstWord = -1

    # 'nipe'
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 10, '\'nipe\'', e)
            self.firstWord = -1

    # 'ripe'
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+y}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 11, '\'ripe\'', e)
            self.firstWord = -1

    # 'sell ex'
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 12, '\'sell ex\'', e)
            self.firstWord = -1

    # 'sell shree'
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 13, '\'sell shree\'', e)
            self.firstWord = -1

    # 'un tab'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace}{Backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 15, '\'un tab\'', e)
            self.firstWord = -1

    # 'lee'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 17, '\'lee\'', e)
            self.firstWord = -1

    # 'ree'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_13(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 18, '\'ree\'', e)
            self.firstWord = -1

    # 'doon'
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{down}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_14(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 19, '\'doon\'', e)
            self.firstWord = -1

    # 'up'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_15(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 20, '\'up\'', e)
            self.firstWord = -1

    # 'Insert Live Template'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+j}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 23, '\'Insert Live Template\'', e)
            self.firstWord = -1

    # 'Surround With Live Template'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+j}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_17(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 24, '\'Surround With Live Template\'', e)
            self.firstWord = -1

    # 'Format'
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 25, '\'Format\'', e)
            self.firstWord = -1

    # 'Full Screen'
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+v}u'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 26, '\'Full Screen\'', e)
            self.firstWord = -1

    # 'Bye'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'bye'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 28, '\'Bye\'', e)
            self.firstWord = -1

    # 'Type' <_anything>
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('webstorm.vcl', 29, '\'Type\' <_anything>', e)
            self.firstWord = -1

    # 'frog'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+j}'
            top_buffer += 'if'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 33, '\'frog\'', e)
            self.firstWord = -1

    # 'each'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+j}'
            top_buffer += 'each'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 38, '\'each\'', e)
            self.firstWord = -1

    # 'New' ('Search' | 'Find')
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_24(words[2:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 48, '\'New\' (\'Search\' | \'Find\')', e)
            self.firstWord = -1

    # 'Find New'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 49, '\'Find New\'', e)
            self.firstWord = -1

    # 'Find That'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 50, '\'Find That\'', e)
            self.firstWord = -1

    # 'Find' ('Down' | 'Up')
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Down':
                top_buffer += '{F3}'
            elif word == 'Up':
                top_buffer += '{Shift+F3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_27(words[2:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 51, '\'Find\' (\'Down\' | \'Up\')', e)
            self.firstWord = -1

    # 'Next Bookmark'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 52, '\'Next Bookmark\'', e)
            self.firstWord = -1

    def get_digit(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Line Number'
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception, e:
            handle_error('webstorm.vcl', 55, '\'Line Number\'', e)
            self.firstWord = -1

    # 'Line Number' <digit>
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('webstorm.vcl', 56, '\'Line Number\' <digit>', e)
            self.firstWord = -1

    # 'Line' <digit>
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('webstorm.vcl', 56, '\'Line\' <digit>', e)
            self.firstWord = -1

    # 'Line Number' <digit> <digit>
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('webstorm.vcl', 57, '\'Line Number\' <digit> <digit>', e)
            self.firstWord = -1

    # 'Line' <digit> <digit>
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('webstorm.vcl', 57, '\'Line\' <digit> <digit>', e)
            self.firstWord = -1

    # 'Line Number' <digit> <digit> <digit>
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('webstorm.vcl', 58, '\'Line Number\' <digit> <digit> <digit>', e)
            self.firstWord = -1

    # 'Line' <digit> <digit> <digit>
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('webstorm.vcl', 58, '\'Line\' <digit> <digit> <digit>', e)
            self.firstWord = -1

    # 'Line Number' <digit> <digit> <digit> <digit>
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('webstorm.vcl', 59, '\'Line Number\' <digit> <digit> <digit> <digit>', e)
            self.firstWord = -1

    # 'Line' <digit> <digit> <digit> <digit>
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('webstorm.vcl', 59, '\'Line\' <digit> <digit> <digit> <digit>', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
